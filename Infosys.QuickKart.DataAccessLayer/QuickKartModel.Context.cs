//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infosys.QuickKart.DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuickKartDBContext : DbContext
    {
        public QuickKartDBContext()
            : base("name=QuickKartDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CardDetail> CardDetails { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
    
        [DbFunction("QuickKartDBContext", "ufn_FetchCartProductByEmailId")]
        public virtual IQueryable<ufn_FetchCartProductByEmailId_Result> ufn_FetchCartProductByEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_FetchCartProductByEmailId_Result>("[QuickKartDBContext].[ufn_FetchCartProductByEmailId](@EmailId)", emailIdParameter);
        }
    
        [DbFunction("QuickKartDBContext", "ufn_GetCardDetails")]
        public virtual IQueryable<ufn_GetCardDetails_Result> ufn_GetCardDetails(Nullable<decimal> cardNumber)
        {
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetCardDetails_Result>("[QuickKartDBContext].[ufn_GetCardDetails](@CardNumber)", cardNumberParameter);
        }
    
        [DbFunction("QuickKartDBContext", "ufn_GetCategories")]
        public virtual IQueryable<ufn_GetCategories_Result> ufn_GetCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetCategories_Result>("[QuickKartDBContext].[ufn_GetCategories]()");
        }
    
        [DbFunction("QuickKartDBContext", "ufn_GetProductDetails")]
        public virtual IQueryable<ufn_GetProductDetails_Result> ufn_GetProductDetails(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetProductDetails_Result>("[QuickKartDBContext].[ufn_GetProductDetails](@CategoryId)", categoryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AddProduct(string productId, string productName, Nullable<byte> categoryId, Nullable<decimal> price, Nullable<int> quantityAvailable)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(byte));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quantityAvailableParameter = quantityAvailable.HasValue ?
                new ObjectParameter("QuantityAvailable", quantityAvailable) :
                new ObjectParameter("QuantityAvailable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AddProduct", productIdParameter, productNameParameter, categoryIdParameter, priceParameter, quantityAvailableParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AddProductToCart(string productId, string emailId)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AddProductToCart", productIdParameter, emailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_InsertPurchaseDetails(string emailId, string productId, Nullable<int> quantityPurchased, ObjectParameter purchaseId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var quantityPurchasedParameter = quantityPurchased.HasValue ?
                new ObjectParameter("QuantityPurchased", quantityPurchased) :
                new ObjectParameter("QuantityPurchased", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_InsertPurchaseDetails", emailIdParameter, productIdParameter, quantityPurchasedParameter, purchaseId);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RegisterUser(string userPassword, string gender, string emailId, Nullable<System.DateTime> dateOfBirth, string address)
        {
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RegisterUser", userPasswordParameter, genderParameter, emailIdParameter, dateOfBirthParameter, addressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateBalance(Nullable<decimal> cardNumber, string nameOnCard, string cardType, Nullable<decimal> cVVNumber, Nullable<System.DateTime> expiryDate, Nullable<decimal> price)
        {
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(decimal));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cVVNumberParameter = cVVNumber.HasValue ?
                new ObjectParameter("CVVNumber", cVVNumber) :
                new ObjectParameter("CVVNumber", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateBalance", cardNumberParameter, nameOnCardParameter, cardTypeParameter, cVVNumberParameter, expiryDateParameter, priceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AddProductRatings(string emailId, string productId, Nullable<byte> reviewRating, string reviewComments)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var reviewRatingParameter = reviewRating.HasValue ?
                new ObjectParameter("ReviewRating", reviewRating) :
                new ObjectParameter("ReviewRating", typeof(byte));
    
            var reviewCommentsParameter = reviewComments != null ?
                new ObjectParameter("ReviewComments", reviewComments) :
                new ObjectParameter("ReviewComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AddProductRatings", emailIdParameter, productIdParameter, reviewRatingParameter, reviewCommentsParameter);
        }
    }
}
